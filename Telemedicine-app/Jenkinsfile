pipeline {
    agent any
    
    environment {
        // Docker Hub credentials ID as configured in Jenkins
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        // Your Docker Hub username
        DOCKER_USERNAME = 'gupta9939'
        // Application version/tag
        APP_VERSION = '02'
        // GitHub repository URL
        GITHUB_REPO = 'https://github.com/Ramjikumarcom/E-Health-Management-node-js.git'
        // GitHub branch
        GITHUB_BRANCH = 'main'
        // Environment variables for the application
        MONGO_URI = 'mongodb://mongodb:27017/telemedicine'
        JWT_SECRET = 'your_jwt_secret_key_here'
        PORT = '5000'
        REACT_APP_API_BASE_URL = 'http://localhost:5000'
    }
    
    stages {
        stage('Checkout from GitHub') {
            steps {
                // Clean workspace before checkout
                deleteDir()
                
                // Checkout code from GitHub repository
                git branch: "${GITHUB_BRANCH}", 
                    url: "${GITHUB_REPO}"
                
                echo "Successfully cloned repository from GitHub"
                
                // Debug: List directory contents
                sh 'ls -la'
                sh 'find . -name "Telemedicine-app/docker-compose.yml" || echo "docker-compose.yml not found"'
            }
        }
        
        stage('Create Environment Files') {
            steps {
                script {
                    // Create backend .env file
                    writeFile file: 'Telemedicine-app/.env', text: """
MONGO_URI=${env.MONGO_URI}
JWT_SECRET=${env.JWT_SECRET}
PORT=${env.PORT}
"""
                    
                    // Create frontend .env file
                    writeFile file: 'Telemedicine-app/client/.env', text: """
REACT_APP_API_BASE_URL=${env.REACT_APP_API_BASE_URL}
"""
                    
                    echo "Environment files created successfully"
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Login to Docker Hub
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKER_USERNAME --password-stdin'
                    
                    // Check if Docker is installed
                    sh 'docker --version || echo "Docker not installed"'
                    
                    // List directory contents to debug
                    sh 'ls -la Telemedicine-app/'
                    sh 'ls -la Telemedicine-app/client/ || echo "Client directory not found"'
                    
                    // Check if Dockerfile exists
                    sh 'cat Telemedicine-app/Dockerfile || echo "Dockerfile not found"'
                    sh 'cat Telemedicine-app/client/Dockerfile || echo "Client Dockerfile not found"'
                    sh 'cat Telemedicine-app/Dockerfile.mongo || echo "MongoDB Dockerfile not found"'
                    
                    // Build MongoDB image
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management:${APP_VERSION} -f Dockerfile.mongo .
                    """
                    
                    // Build backend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_backend:${APP_VERSION} .
                    """
                    
                    // Build frontend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_frontend:${APP_VERSION} -f client/Dockerfile client/
                    """
                    
                    echo "Successfully built Docker images"
                }
            }
        }
        
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    // Push MongoDB image
                    sh "docker push $DOCKER_USERNAME/e_health_management:$APP_VERSION"
                    
                    // Push backend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_backend:$APP_VERSION"
                    
                    // Push frontend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_frontend:$APP_VERSION"
                    
                    echo "Successfully pushed all images to Docker Hub"
                }
            }
        }
        
        
        
        stage('Deploy with Ansible') {
            steps {
                script {
                    // Run Ansible playbook
                    sh '''
                    cd Telemedicine-app/ansible
                    ansible-playbook -i inventory.ini site.yml -c local
                    '''
                    
                    echo "Application deployed successfully with Ansible"
                }
            }
        }
        
}
