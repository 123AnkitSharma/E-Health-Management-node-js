pipeline {
    agent any
    
    environment {
        // Docker Hub credentials ID as configured in Jenkins
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        // Your Docker Hub username
        DOCKER_USERNAME = 'gupta9939'
        // Application version/tag
        APP_VERSION = '02'
        // GitHub repository URL
        GITHUB_REPO = 'https://github.com/Ramjikumarcom/E-Health-Management-node-js.git'
        // GitHub branch
        GITHUB_BRANCH = 'main'
        // Environment variables for the application
        MONGO_URI = 'mongodb://mongodb:27017/telemedicine'
        JWT_SECRET = 'your_jwt_secret_key_here'
        PORT = '5000'
        REACT_APP_API_BASE_URL = 'http://localhost:5000'
        // Kubernetes namespace
        K8S_NAMESPACE = 'e-health'
    }
    
    stages {
        stage('Checkout from GitHub') {
            steps {
                // Clean workspace before checkout
                deleteDir()
                
                // Checkout code from GitHub repository
                git branch: "${GITHUB_BRANCH}", 
                    url: "${GITHUB_REPO}"
                
                echo "Successfully cloned repository from GitHub"
                
                // Debug: List directory contents
                sh 'ls -la'
                sh 'find . -name "Telemedicine-app/docker-compose.yml" || echo "docker-compose.yml not found"'
            }
        }
        
        stage('Create Environment Files') {
            steps {
                script {
                    // Create backend .env file
                    writeFile file: 'Telemedicine-app/.env', text: """
MONGO_URI=${env.MONGO_URI}
JWT_SECRET=${env.JWT_SECRET}
PORT=${env.PORT}
"""
                    
                    // Create frontend .env file
                    writeFile file: 'Telemedicine-app/client/.env', text: """
REACT_APP_API_BASE_URL=${env.REACT_APP_API_BASE_URL}
"""
                    
                    echo "Environment files created successfully"
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Login to Docker Hub
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKER_USERNAME --password-stdin'
                    
                    // Check if Docker is installed
                    sh 'docker --version || echo "Docker not installed"'
                    
                    // List directory contents to debug
                    sh 'ls -la Telemedicine-app/'
                    sh 'ls -la Telemedicine-app/client/ || echo "Client directory not found"'
                    
                    // Check if Dockerfile exists
                    sh 'cat Telemedicine-app/Dockerfile || echo "Dockerfile not found"'
                    sh 'cat Telemedicine-app/client/Dockerfile || echo "Client Dockerfile not found"'
                    sh 'cat Telemedicine-app/Dockerfile.mongo || echo "MongoDB Dockerfile not found"'
                    
                    // Build MongoDB image
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management:${APP_VERSION} -f Dockerfile.mongo .
                    """
                    
                    // Build backend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_backend:${APP_VERSION} .
                    """
                    
                    // Build frontend image directly with Docker
                    sh """
                    cd Telemedicine-app && docker build -t ${DOCKER_USERNAME}/e_health_management_frontend:${APP_VERSION} -f client/Dockerfile client/
                    """
                    
                    echo "Successfully built Docker images"
                }
            }
        }
        
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    // Push MongoDB image
                    sh "docker push $DOCKER_USERNAME/e_health_management:$APP_VERSION"
                    
                    // Push backend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_backend:$APP_VERSION"
                    
                    // Push frontend image
                    sh "docker push $DOCKER_USERNAME/e_health_management_frontend:$APP_VERSION"
                    
                    echo "Successfully pushed all images to Docker Hub"
                }
            }
        }
        
        stage('Install Ansible') {
            steps {
                script {
                    // Just verify Ansible is available
                    sh '''
                    ansible --version || echo "Ansible not working properly"
                    '''
                }
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                script {
                    // Run Ansible playbook
                    sh '''
                    cd Telemedicine-app/ansible
                    ansible-playbook -i inventory.ini site.yml -c local
                    '''
                    
                    echo "Application deployed successfully with Ansible"
                }
            }
        }
        
        stage('Install Kubernetes Tools') {
            steps {
                script {
                    // Just verify kubectl is available
                    sh '''
                    kubectl version --client || echo "kubectl not working properly"
                    '''
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Set up proper Kubernetes context and authentication
                    sh """
                    # Print current context and available contexts
                    echo "Current Kubernetes context:"
                    kubectl config current-context || true
                    echo "Available Kubernetes contexts:"
                    kubectl config get-contexts || true
                    
                    # Create namespace if it doesn't exist
                    kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}
                    
                    # Verify connectivity to the cluster
                    kubectl cluster-info
                    """
                    
                    // Use the Jenkins service account token for authentication
                    sh '''
                    # Apply the Jenkins service account if it doesn't exist
                    kubectl apply -f ${WORKSPACE}/Telemedicine-app/kubernetes/jenkins-serviceaccount.yaml
                    
                    # Wait for the service account token to be created
                    sleep 5
                    
                    # Get the token from the Jenkins service account
                    TOKEN=$(kubectl get secret $(kubectl get serviceaccount jenkins -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode)
                    
                    # Create a kubeconfig file using the service account token
                    cat > ${WORKSPACE}/kubeconfig << EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    server: $(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
    insecure-skip-tls-verify: true
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: jenkins
  name: jenkins-context
current-context: jenkins-context
preferences: {}
users:
- name: jenkins
  user:
    token: ${TOKEN}
EOF
                    
                    chmod 600 ${WORKSPACE}/kubeconfig
                    '''
                    
                    // Make deploy.sh executable
                    sh '''
                    cd Telemedicine-app/kubernetes
                    chmod +x deploy.sh
                    '''
                    
                    // Run the deploy.sh script with explicit kubeconfig
                    sh """
                    export KUBECONFIG=${WORKSPACE}/kubeconfig
                    cd ${WORKSPACE}/Telemedicine-app/kubernetes
                    
                    # Run deploy script with explicit kubeconfig
                    KUBECONFIG=${WORKSPACE}/kubeconfig ./deploy.sh
                    
                    # Verify deployment
                    echo "Verifying deployment in namespace ${K8S_NAMESPACE}:"
                    KUBECONFIG=${WORKSPACE}/kubeconfig kubectl get all -n ${K8S_NAMESPACE}
                    """
                    
                    // Clean up kubeconfig
                    sh """
                    rm -f ${WORKSPACE}/kubeconfig
                    """
                    
                    echo "Application deployed successfully to Kubernetes"
                }
            }
        }
        
        stage('Deploy with Docker (Fallback)') {
            when {
                expression { return false } // Disabled by default, enable if Ansible deployment fails
            }
            steps {
                script {
                    // Deploy using Docker run commands instead of docker-compose
                    sh """
                    # Stop and remove existing containers
                    docker stop e_health_backend || true
                    docker stop e_health_frontend || true
                    docker stop mongodb || true
                    docker rm e_health_backend || true
                    docker rm e_health_frontend || true
                    docker rm mongodb || true
                    
                    # Run MongoDB container
                    docker run -d --name mongodb -p 27017:27017 ${DOCKER_USERNAME}/e_health_management:${APP_VERSION}
                    
                    # Run backend container
                    docker run -d --name e_health_backend -p 5000:5000 --env-file Telemedicine-app/.env --link mongodb:mongodb ${DOCKER_USERNAME}/e_health_management_backend:${APP_VERSION}
                    
                    # Run frontend container
                    docker run -d --name e_health_frontend -p 3000:3000 --env-file Telemedicine-app/client/.env --link e_health_backend:backend ${DOCKER_USERNAME}/e_health_management_frontend:${APP_VERSION}
                    """
                    
                    echo "Application deployed successfully with Docker"
                }
            }
        }
    }
    
    post {
        always {
            // Logout from Docker Hub
            sh 'docker logout'
            
            // Clean up unused Docker resources
            sh 'docker system prune -af --volumes || true'
            
            // Clean up sensitive files
            sh 'rm -f Telemedicine-app/.env Telemedicine-app/client/.env || true'
            
            echo "Pipeline completed - cleanup executed"
        }
        
        success {
            echo 'Deployment completed successfully!'
        }
        
        failure {
            echo 'Deployment failed! Check logs for details.'
        }
    }
}
