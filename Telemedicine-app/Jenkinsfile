pipeline {
    agent any
    
    environment {
        // Credentials - Updated to match your credential IDs
        DOCKERHUB_CREDENTIALS = credentials('DoderniaCcred')  // Changed to match your credential ID
        KUBECONFIG = credentials('Jenkins-lists-token')       // Changed to match your credential ID
        
        // Application Configuration
        DOCKER_USERNAME = 'itsankit123'
        APP_VERSION = '02'
        GITHUB_REPO = 'https://github.com/123AnkitSharma/E-Health-Management-node-js.git'
        GITHUB_BRANCH = 'main'
        
        // Application Secrets - Updated to match your credential IDs
        MONGO_URI = credentials('mongo.url')      // Changed to match your credential ID
        JWT_SECRET = credentials('Jwt-secret')    // Changed to match your credential ID (case-sensitive)
        PORT = '5000'
        REACT_APP_API_BASE_URL = 'http://localhost:5000'
        
        // Deployment Configuration
        DEPLOYMENT_METHOD = 'kubernetes'
        K8S_NAMESPACE = 'telemedicine'
    }
    
    stages {
        stage('Initialize') {
            steps {
                cleanWs()
                echo "Starting deployment of E-Health Management System"
                sh "printenv | sort" // Debug environment variables
            }
        }
        
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${GITHUB_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GITHUB_REPO}"]],
                    extensions: [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: 'src'
                    ]]
                )
                
                dir('src') {
                    sh '''
                    echo "Repository contents:"
                    ls -la
                    tree -L 2 || echo "tree command not available"
                    '''
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                dir('src/Telemedicine-app') {
                    // Create .env files from Jenkins credentials
                    sh """
                    cat <<EOT > .env
                    MONGO_URI=${MONGO_URI}
                    JWT_SECRET=${JWT_SECRET}
                    PORT=${PORT}
                    EOT
                    
                    cat <<EOT > client/.env
                    REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
                    EOT
                    """
                    
                    // Verify files were created
                    sh '''
                    echo "Backend .env:"
                    cat .env
                    echo "\nFrontend .env:"
                    cat client/.env
                    '''
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                dir('src/Telemedicine-app') {
                    script {
                        // Authenticate with Docker Hub using the correct credential ID
                        withCredentials([usernamePassword(
                            credentialsId: 'DoderniaCcred',  // Updated to match your credential ID
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                            sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        }
                        
                        // Build images in parallel
                        parallel(
                            "Database": {
                                sh "docker build -t ${DOCKER_USERNAME}/healthmanagement-database:${APP_VERSION} -f Dockerfile.mongo ."
                            },
                            "Backend": {
                                sh "docker build -t ${DOCKER_USERNAME}/healthmanagement-backend:${APP_VERSION} ."
                            },
                            "Frontend": {
                                sh "docker build -t ${DOCKER_USERNAME}/healthmanagement-frontend:${APP_VERSION} -f client/Dockerfile client/"
                            }
                        )
                    }
                }
            }
        }
        
        stage('Push Images') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'DoderniaCcred',  // Updated to match your credential ID
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                        docker push ${DOCKER_USERNAME}/healthmanagement-database:${APP_VERSION}
                        docker push ${DOCKER_USERNAME}/healthmanagement-backend:${APP_VERSION}
                        docker push ${DOCKER_USERNAME}/healthmanagement-frontend:${APP_VERSION}
                        """
                    }
                }
            }
        }
        
        stage('Kubernetes Deployment') {
            when {
                expression { return env.DEPLOYMENT_METHOD == 'kubernetes' }
            }
            steps {
                dir('src/Telemedicine-app/kubernetes') {
                    script {
                        // Setup kubectl using the correct credential ID
                        sh '''
                        mkdir -p ${HOME}/.kube
                        cp ${KUBECONFIG} ${HOME}/.kube/config
                        chmod 600 ${HOME}/.kube/config
                        export KUBECONFIG=${HOME}/.kube/config
                        '''
                        
                        // Create namespace if not exists
                        sh """
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        """
                        
                        // Create Kubernetes secrets using the correct credential references
                        sh """
                        kubectl create secret generic app-secrets \
                            --namespace ${K8S_NAMESPACE} \
                            --from-literal=MONGO_URI=${MONGO_URI} \
                            --from-literal=JWT_SECRET=${JWT_SECRET} \
                            --dry-run=client -o yaml | kubectl apply -f -
                        """
                        
                        // Deploy application
                        sh '''
                        # Update image tags in deployment files
                        sed -i "s|itsankit123/healthmanagement-|${DOCKER_USERNAME}/healthmanagement-|g" *.yaml
                        sed -i "s|:latest|:${APP_VERSION}|g" *.yaml
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f namespace.yaml
                        kubectl apply -f secret.yaml
                        kubectl apply -f mongo.yaml
                        kubectl apply -f backend.yaml
                        kubectl apply -f frontend.yaml
                        
                        # Wait for rollout to complete
                        kubectl rollout status deployment/backend -n ${K8S_NAMESPACE} --timeout=300s
                        kubectl rollout status deployment/frontend -n ${K8S_NAMESPACE} --timeout=300s
                        '''
                        
                        // Get application URLs
                        sh """
                        echo "Deployment status:"
                        kubectl get all -n ${K8S_NAMESPACE}
                        
                        echo -e "\nAccess URLs:"
                        kubectl get ingress -n ${K8S_NAMESPACE} -o jsonpath='{.items[*].spec.rules[*].host}' || \
                            echo "No ingress found, using NodePort: \n$(kubectl get svc frontend -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}')"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup Docker credentials
            sh 'docker logout || true'
            
            // Cleanup sensitive files
            dir('src/Telemedicine-app') {
                sh '''
                rm -f .env client/.env || true
                '''
            }
            
            // Cleanup kubeconfig
            sh '''
            rm -f ${HOME}/.kube/config || true
            '''
            
            echo "Pipeline execution completed"
        }
        
        success {
            echo 'Deployment completed successfully!'
        }
        
        failure {
            echo 'Deployment failed! Check logs for details.'
        }
    }
}
